MAIN
	// Virtual table for BBS
	MOVE TEMP 2 BBS_vTable
	MOVE TEMP 3 HALLOCATE 16
	HSTORE TEMP 2 0 TEMP 3
	MOVE TEMP 4 BBS_Start
	HSTORE TEMP 3 0 TEMP 4
	MOVE TEMP 5 BBS_Sort
	HSTORE TEMP 3 4 TEMP 5
	MOVE TEMP 6 BBS_Print
	HSTORE TEMP 3 8 TEMP 6
	MOVE TEMP 7 BBS_Init
	HSTORE TEMP 3 12 TEMP 7
	// new BBS()
	MOVE TEMP 8 HALLOCATE 12
	MOVE TEMP 9 BBS_vTable
	HLOAD TEMP 10 TEMP 9 0
	HSTORE TEMP 8 0 TEMP 10
	// Start of object fields initialization -->
	MOVE TEMP 11 0  // Zero value register
	MOVE TEMP 12 4  // Offset register
L1	MOVE TEMP 13 LT TEMP 12 12
	CJUMP TEMP 13 L2
	MOVE TEMP 14 PLUS TEMP 8 TEMP 12
	HSTORE TEMP 14 0 TEMP 11
	MOVE TEMP 12 PLUS TEMP 12 4
	JUMP L1
L2	NOOP
	// <-- End of object fields initialization
	// Requested call on TEMP 8 of type BBS
	MOVE TEMP 15 LT TEMP 8 1
	CJUMP TEMP 15 L3
	ERROR
L3	// Load BBS.Start()
	HLOAD TEMP 16 TEMP 8 0
	HLOAD TEMP 17 TEMP 16 0
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 18 10
	// Call BBS.Start()
	MOVE TEMP 19 CALL TEMP 17 (TEMP 8 TEMP 18)
	PRINT TEMP 19
END

BBS_Start [2]
BEGIN
	// Requested call on TEMP 0 of type BBS
	MOVE TEMP 3 LT TEMP 0 1
	CJUMP TEMP 3 L1
	ERROR
L1	// Load BBS.Init()
	HLOAD TEMP 4 TEMP 0 0
	HLOAD TEMP 5 TEMP 4 12
	// Evaluate arguments
	// Argument 1
	// Call BBS.Init()
	MOVE TEMP 6 CALL TEMP 5 (TEMP 0 TEMP 1)
	MOVE TEMP 2 TEMP 6
	// Requested call on TEMP 0 of type BBS
	MOVE TEMP 7 LT TEMP 0 1
	CJUMP TEMP 7 L2
	ERROR
L2	// Load BBS.Print()
	HLOAD TEMP 8 TEMP 0 0
	HLOAD TEMP 9 TEMP 8 8
	// Evaluate arguments
	// Call BBS.Print()
	MOVE TEMP 10 CALL TEMP 9 (TEMP 0)
	MOVE TEMP 2 TEMP 10
	MOVE TEMP 11 99999
	PRINT TEMP 11
	// Requested call on TEMP 0 of type BBS
	MOVE TEMP 12 LT TEMP 0 1
	CJUMP TEMP 12 L3
	ERROR
L3	// Load BBS.Sort()
	HLOAD TEMP 13 TEMP 0 0
	HLOAD TEMP 14 TEMP 13 4
	// Evaluate arguments
	// Call BBS.Sort()
	MOVE TEMP 15 CALL TEMP 14 (TEMP 0)
	MOVE TEMP 2 TEMP 15
	// Requested call on TEMP 0 of type BBS
	MOVE TEMP 16 LT TEMP 0 1
	CJUMP TEMP 16 L4
	ERROR
L4	// Load BBS.Print()
	HLOAD TEMP 17 TEMP 0 0
	HLOAD TEMP 18 TEMP 17 8
	// Evaluate arguments
	// Call BBS.Print()
	MOVE TEMP 19 CALL TEMP 18 (TEMP 0)
	MOVE TEMP 2 TEMP 19
	MOVE TEMP 20 0
RETURN
	TEMP 20
END

BBS_Sort [1]
BEGIN
	HLOAD TEMP 10 TEMP 0 8
	MOVE TEMP 11 1
	MOVE TEMP 12 MINUS TEMP 10 TEMP 11
	MOVE TEMP 2 TEMP 12
	MOVE TEMP 13 0
	MOVE TEMP 14 1
	MOVE TEMP 15 MINUS TEMP 13 TEMP 14
	MOVE TEMP 3 TEMP 15
	// Start of while statement -->
L1	MOVE TEMP 16 LT TEMP 3 TEMP 2
	CJUMP TEMP 16 L2
	MOVE TEMP 17 1
	MOVE TEMP 8 TEMP 17
	// Start of while statement -->
L3	MOVE TEMP 18 1
	MOVE TEMP 19 PLUS TEMP 2 TEMP 18
	MOVE TEMP 20 LT TEMP 8 TEMP 19
	CJUMP TEMP 20 L4
	MOVE TEMP 21 1
	MOVE TEMP 22 MINUS TEMP 8 TEMP 21
	MOVE TEMP 7 TEMP 22
	HLOAD TEMP 23 TEMP 0 4
	MOVE TEMP 25 LT TEMP 7 0
	CJUMP TEMP 25 L5
	ERROR
L5	HLOAD TEMP 24 TEMP 23 0
	MOVE TEMP 25 LT TEMP 24 TEMP 7
	CJUMP TEMP 25 L6
	ERROR
L6	MOVE TEMP 26 PLUS TEMP 7 1
	MOVE TEMP 26 TIMES TEMP 26 4
	MOVE TEMP 26 PLUS TEMP 26 TEMP 23
	HLOAD TEMP 27 TEMP 26 0
	MOVE TEMP 4 TEMP 27
	HLOAD TEMP 28 TEMP 0 4
	MOVE TEMP 30 LT TEMP 8 0
	CJUMP TEMP 30 L7
	ERROR
L7	HLOAD TEMP 29 TEMP 28 0
	MOVE TEMP 30 LT TEMP 29 TEMP 8
	CJUMP TEMP 30 L8
	ERROR
L8	MOVE TEMP 31 PLUS TEMP 8 1
	MOVE TEMP 31 TIMES TEMP 31 4
	MOVE TEMP 31 PLUS TEMP 31 TEMP 28
	HLOAD TEMP 32 TEMP 31 0
	MOVE TEMP 5 TEMP 32
	// Start of if statement -->
	MOVE TEMP 33 LT TEMP 5 TEMP 4
	CJUMP TEMP 33 L9
	MOVE TEMP 34 1
	MOVE TEMP 35 MINUS TEMP 8 TEMP 34
	MOVE TEMP 6 TEMP 35
	HLOAD TEMP 36 TEMP 0 4
	MOVE TEMP 38 LT TEMP 6 0
	CJUMP TEMP 38 L11
	ERROR
L11	HLOAD TEMP 37 TEMP 36 0
	MOVE TEMP 38 LT TEMP 37 TEMP 6
	CJUMP TEMP 38 L12
	ERROR
L12	MOVE TEMP 39 PLUS TEMP 6 1
	MOVE TEMP 39 TIMES TEMP 39 4
	MOVE TEMP 39 PLUS TEMP 39 TEMP 36
	HLOAD TEMP 40 TEMP 39 0
	MOVE TEMP 9 TEMP 40
	// Start of array assignment -->
	HLOAD TEMP 41 TEMP 0 4
	HLOAD TEMP 42 TEMP 0 4
	MOVE TEMP 44 LT TEMP 8 0
	CJUMP TEMP 44 L13
	ERROR
L13	HLOAD TEMP 43 TEMP 42 0
	MOVE TEMP 44 LT TEMP 43 TEMP 8
	CJUMP TEMP 44 L14
	ERROR
L14	MOVE TEMP 45 PLUS TEMP 8 1
	MOVE TEMP 45 TIMES TEMP 45 4
	MOVE TEMP 45 PLUS TEMP 45 TEMP 42
	HLOAD TEMP 46 TEMP 45 0
	MOVE TEMP 48 LT TEMP 6 0
	CJUMP TEMP 48 L15
	ERROR
L15	HLOAD TEMP 47 TEMP 41 0
	MOVE TEMP 48 LT TEMP 47 TEMP 6
	CJUMP TEMP 48 L16
	ERROR
L16	MOVE TEMP 49 PLUS TEMP 6 1
	MOVE TEMP 49 TIMES TEMP 49 4
	MOVE TEMP 49 PLUS TEMP 49 TEMP 41
	HSTORE TEMP 49 0 TEMP 46
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 50 TEMP 0 4
	MOVE TEMP 52 LT TEMP 8 0
	CJUMP TEMP 52 L17
	ERROR
L17	HLOAD TEMP 51 TEMP 50 0
	MOVE TEMP 52 LT TEMP 51 TEMP 8
	CJUMP TEMP 52 L18
	ERROR
L18	MOVE TEMP 53 PLUS TEMP 8 1
	MOVE TEMP 53 TIMES TEMP 53 4
	MOVE TEMP 53 PLUS TEMP 53 TEMP 50
	HSTORE TEMP 53 0 TEMP 9
	// <-- End of array assignment
	JUMP L10
L9	MOVE TEMP 54 0
	MOVE TEMP 1 TEMP 54
L10	NOOP
	// <-- End of if statement
	MOVE TEMP 55 1
	MOVE TEMP 56 PLUS TEMP 8 TEMP 55
	MOVE TEMP 8 TEMP 56
	JUMP L3
L4	NOOP
	// <-- End of while statement
	MOVE TEMP 57 1
	MOVE TEMP 58 MINUS TEMP 2 TEMP 57
	MOVE TEMP 2 TEMP 58
	JUMP L1
L2	NOOP
	// <-- End of while statement
	MOVE TEMP 59 0
RETURN
	TEMP 59
END

BBS_Print [1]
BEGIN
	MOVE TEMP 2 0
	MOVE TEMP 1 TEMP 2
	// Start of while statement -->
L1	HLOAD TEMP 3 TEMP 0 8
	MOVE TEMP 4 LT TEMP 1 TEMP 3
	CJUMP TEMP 4 L2
	HLOAD TEMP 5 TEMP 0 4
	MOVE TEMP 7 LT TEMP 1 0
	CJUMP TEMP 7 L3
	ERROR
L3	HLOAD TEMP 6 TEMP 5 0
	MOVE TEMP 7 LT TEMP 6 TEMP 1
	CJUMP TEMP 7 L4
	ERROR
L4	MOVE TEMP 8 PLUS TEMP 1 1
	MOVE TEMP 8 TIMES TEMP 8 4
	MOVE TEMP 8 PLUS TEMP 8 TEMP 5
	HLOAD TEMP 9 TEMP 8 0
	PRINT TEMP 9
	MOVE TEMP 10 1
	MOVE TEMP 11 PLUS TEMP 1 TEMP 10
	MOVE TEMP 1 TEMP 11
	JUMP L1
L2	NOOP
	// <-- End of while statement
	MOVE TEMP 12 0
RETURN
	TEMP 12
END

BBS_Init [2]
BEGIN
	HSTORE TEMP 0 8 TEMP 1
	// Check whether array allocation size is positive
	MOVE TEMP 2 LT TEMP 1 1
	CJUMP TEMP 2 L1
	ERROR
L1	// Start of array allocation -->
	MOVE TEMP 4 PLUS TEMP 1 1
	MOVE TEMP 5 TIMES TEMP 4 4
	MOVE TEMP 6 HALLOCATE TEMP 5
	MOVE TEMP 3 TIMES TEMP 1 4
	// Initialize allocated array
	MOVE TEMP 7 0  // Zero value register
	MOVE TEMP 8 4  // Offset register
L2	MOVE TEMP 9 LT TEMP 8 TEMP 5
	CJUMP TEMP 9 L3
	MOVE TEMP 10 PLUS TEMP 6 TEMP 8
	HSTORE TEMP 10 0 TEMP 7
	MOVE TEMP 8 PLUS TEMP 8 4
	JUMP L2
L3	HSTORE TEMP 6 0 TEMP 1  // Store array length
	// <-- End of array allocation
	HSTORE TEMP 0 4 TEMP 6
	// Start of array assignment -->
	HLOAD TEMP 11 TEMP 0 4
	MOVE TEMP 12 20
	MOVE TEMP 13 0
	MOVE TEMP 15 LT TEMP 13 0
	CJUMP TEMP 15 L4
	ERROR
L4	HLOAD TEMP 14 TEMP 11 0
	MOVE TEMP 15 LT TEMP 14 TEMP 13
	CJUMP TEMP 15 L5
	ERROR
L5	MOVE TEMP 16 PLUS TEMP 13 1
	MOVE TEMP 16 TIMES TEMP 16 4
	MOVE TEMP 16 PLUS TEMP 16 TEMP 11
	HSTORE TEMP 16 0 TEMP 12
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 17 TEMP 0 4
	MOVE TEMP 18 7
	MOVE TEMP 19 1
	MOVE TEMP 21 LT TEMP 19 0
	CJUMP TEMP 21 L6
	ERROR
L6	HLOAD TEMP 20 TEMP 17 0
	MOVE TEMP 21 LT TEMP 20 TEMP 19
	CJUMP TEMP 21 L7
	ERROR
L7	MOVE TEMP 22 PLUS TEMP 19 1
	MOVE TEMP 22 TIMES TEMP 22 4
	MOVE TEMP 22 PLUS TEMP 22 TEMP 17
	HSTORE TEMP 22 0 TEMP 18
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 23 TEMP 0 4
	MOVE TEMP 24 12
	MOVE TEMP 25 2
	MOVE TEMP 27 LT TEMP 25 0
	CJUMP TEMP 27 L8
	ERROR
L8	HLOAD TEMP 26 TEMP 23 0
	MOVE TEMP 27 LT TEMP 26 TEMP 25
	CJUMP TEMP 27 L9
	ERROR
L9	MOVE TEMP 28 PLUS TEMP 25 1
	MOVE TEMP 28 TIMES TEMP 28 4
	MOVE TEMP 28 PLUS TEMP 28 TEMP 23
	HSTORE TEMP 28 0 TEMP 24
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 29 TEMP 0 4
	MOVE TEMP 30 18
	MOVE TEMP 31 3
	MOVE TEMP 33 LT TEMP 31 0
	CJUMP TEMP 33 L10
	ERROR
L10	HLOAD TEMP 32 TEMP 29 0
	MOVE TEMP 33 LT TEMP 32 TEMP 31
	CJUMP TEMP 33 L11
	ERROR
L11	MOVE TEMP 34 PLUS TEMP 31 1
	MOVE TEMP 34 TIMES TEMP 34 4
	MOVE TEMP 34 PLUS TEMP 34 TEMP 29
	HSTORE TEMP 34 0 TEMP 30
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 35 TEMP 0 4
	MOVE TEMP 36 2
	MOVE TEMP 37 4
	MOVE TEMP 39 LT TEMP 37 0
	CJUMP TEMP 39 L12
	ERROR
L12	HLOAD TEMP 38 TEMP 35 0
	MOVE TEMP 39 LT TEMP 38 TEMP 37
	CJUMP TEMP 39 L13
	ERROR
L13	MOVE TEMP 40 PLUS TEMP 37 1
	MOVE TEMP 40 TIMES TEMP 40 4
	MOVE TEMP 40 PLUS TEMP 40 TEMP 35
	HSTORE TEMP 40 0 TEMP 36
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 41 TEMP 0 4
	MOVE TEMP 42 11
	MOVE TEMP 43 5
	MOVE TEMP 45 LT TEMP 43 0
	CJUMP TEMP 45 L14
	ERROR
L14	HLOAD TEMP 44 TEMP 41 0
	MOVE TEMP 45 LT TEMP 44 TEMP 43
	CJUMP TEMP 45 L15
	ERROR
L15	MOVE TEMP 46 PLUS TEMP 43 1
	MOVE TEMP 46 TIMES TEMP 46 4
	MOVE TEMP 46 PLUS TEMP 46 TEMP 41
	HSTORE TEMP 46 0 TEMP 42
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 47 TEMP 0 4
	MOVE TEMP 48 6
	MOVE TEMP 49 6
	MOVE TEMP 51 LT TEMP 49 0
	CJUMP TEMP 51 L16
	ERROR
L16	HLOAD TEMP 50 TEMP 47 0
	MOVE TEMP 51 LT TEMP 50 TEMP 49
	CJUMP TEMP 51 L17
	ERROR
L17	MOVE TEMP 52 PLUS TEMP 49 1
	MOVE TEMP 52 TIMES TEMP 52 4
	MOVE TEMP 52 PLUS TEMP 52 TEMP 47
	HSTORE TEMP 52 0 TEMP 48
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 53 TEMP 0 4
	MOVE TEMP 54 9
	MOVE TEMP 55 7
	MOVE TEMP 57 LT TEMP 55 0
	CJUMP TEMP 57 L18
	ERROR
L18	HLOAD TEMP 56 TEMP 53 0
	MOVE TEMP 57 LT TEMP 56 TEMP 55
	CJUMP TEMP 57 L19
	ERROR
L19	MOVE TEMP 58 PLUS TEMP 55 1
	MOVE TEMP 58 TIMES TEMP 58 4
	MOVE TEMP 58 PLUS TEMP 58 TEMP 53
	HSTORE TEMP 58 0 TEMP 54
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 59 TEMP 0 4
	MOVE TEMP 60 19
	MOVE TEMP 61 8
	MOVE TEMP 63 LT TEMP 61 0
	CJUMP TEMP 63 L20
	ERROR
L20	HLOAD TEMP 62 TEMP 59 0
	MOVE TEMP 63 LT TEMP 62 TEMP 61
	CJUMP TEMP 63 L21
	ERROR
L21	MOVE TEMP 64 PLUS TEMP 61 1
	MOVE TEMP 64 TIMES TEMP 64 4
	MOVE TEMP 64 PLUS TEMP 64 TEMP 59
	HSTORE TEMP 64 0 TEMP 60
	// <-- End of array assignment
	// Start of array assignment -->
	HLOAD TEMP 65 TEMP 0 4
	MOVE TEMP 66 5
	MOVE TEMP 67 9
	MOVE TEMP 69 LT TEMP 67 0
	CJUMP TEMP 69 L22
	ERROR
L22	HLOAD TEMP 68 TEMP 65 0
	MOVE TEMP 69 LT TEMP 68 TEMP 67
	CJUMP TEMP 69 L23
	ERROR
L23	MOVE TEMP 70 PLUS TEMP 67 1
	MOVE TEMP 70 TIMES TEMP 70 4
	MOVE TEMP 70 PLUS TEMP 70 TEMP 65
	HSTORE TEMP 70 0 TEMP 66
	// <-- End of array assignment
	MOVE TEMP 71 0
RETURN
	TEMP 71
END
