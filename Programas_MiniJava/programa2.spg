MAIN
	// Virtual table for BS
	MOVE TEMP 2 BS_vTable
	MOVE TEMP 3 HALLOCATE 24
	HSTORE TEMP 2 0 TEMP 3
	MOVE TEMP 4 BS_Start
	HSTORE TEMP 3 0 TEMP 4
	MOVE TEMP 5 BS_Search
	HSTORE TEMP 3 4 TEMP 5
	MOVE TEMP 6 BS_Div
	HSTORE TEMP 3 8 TEMP 6
	MOVE TEMP 7 BS_Compare
	HSTORE TEMP 3 12 TEMP 7
	MOVE TEMP 8 BS_Print
	HSTORE TEMP 3 16 TEMP 8
	MOVE TEMP 9 BS_Init
	HSTORE TEMP 3 20 TEMP 9
	// new BS()
	MOVE TEMP 10 HALLOCATE 12
	MOVE TEMP 11 BS_vTable
	HLOAD TEMP 12 TEMP 11 0
	HSTORE TEMP 10 0 TEMP 12
	// Start of object fields initialization -->
	MOVE TEMP 13 0  // Zero value register
	MOVE TEMP 14 4  // Offset register
L1	MOVE TEMP 15 LT TEMP 14 12
	CJUMP TEMP 15 L2
	MOVE TEMP 16 PLUS TEMP 10 TEMP 14
	HSTORE TEMP 16 0 TEMP 13
	MOVE TEMP 14 PLUS TEMP 14 4
	JUMP L1
L2	NOOP
	// <-- End of object fields initialization
	// Requested call on TEMP 10 of type BS
	MOVE TEMP 17 LT TEMP 10 1
	CJUMP TEMP 17 L3
	ERROR
L3	// Load BS.Start()
	HLOAD TEMP 18 TEMP 10 0
	HLOAD TEMP 19 TEMP 18 0
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 20 20
	// Call BS.Start()
	MOVE TEMP 21 CALL TEMP 19 (TEMP 10 TEMP 20)
	PRINT TEMP 21
END

BS_Start [2]
BEGIN
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 4 LT TEMP 0 1
	CJUMP TEMP 4 L1
	ERROR
L1	// Load BS.Init()
	HLOAD TEMP 5 TEMP 0 0
	HLOAD TEMP 6 TEMP 5 20
	// Evaluate arguments
	// Argument 1
	// Call BS.Init()
	MOVE TEMP 7 CALL TEMP 6 (TEMP 0 TEMP 1)
	MOVE TEMP 2 TEMP 7
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 8 LT TEMP 0 1
	CJUMP TEMP 8 L2
	ERROR
L2	// Load BS.Print()
	HLOAD TEMP 9 TEMP 0 0
	HLOAD TEMP 10 TEMP 9 16
	// Evaluate arguments
	// Call BS.Print()
	MOVE TEMP 11 CALL TEMP 10 (TEMP 0)
	MOVE TEMP 3 TEMP 11
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 12 LT TEMP 0 1
	CJUMP TEMP 12 L5
	ERROR
L5	// Load BS.Search()
	HLOAD TEMP 13 TEMP 0 0
	HLOAD TEMP 14 TEMP 13 4
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 15 8
	// Call BS.Search()
	MOVE TEMP 16 CALL TEMP 14 (TEMP 0 TEMP 15)
	CJUMP TEMP 16 L3
	MOVE TEMP 17 1
	PRINT TEMP 17
	JUMP L4
L3	MOVE TEMP 18 0
	PRINT TEMP 18
L4	NOOP
	// <-- End of if statement
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 19 LT TEMP 0 1
	CJUMP TEMP 19 L8
	ERROR
L8	// Load BS.Search()
	HLOAD TEMP 20 TEMP 0 0
	HLOAD TEMP 21 TEMP 20 4
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 22 19
	// Call BS.Search()
	MOVE TEMP 23 CALL TEMP 21 (TEMP 0 TEMP 22)
	CJUMP TEMP 23 L6
	MOVE TEMP 24 1
	PRINT TEMP 24
	JUMP L7
L6	MOVE TEMP 25 0
	PRINT TEMP 25
L7	NOOP
	// <-- End of if statement
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 26 LT TEMP 0 1
	CJUMP TEMP 26 L11
	ERROR
L11	// Load BS.Search()
	HLOAD TEMP 27 TEMP 0 0
	HLOAD TEMP 28 TEMP 27 4
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 29 20
	// Call BS.Search()
	MOVE TEMP 30 CALL TEMP 28 (TEMP 0 TEMP 29)
	CJUMP TEMP 30 L9
	MOVE TEMP 31 1
	PRINT TEMP 31
	JUMP L10
L9	MOVE TEMP 32 0
	PRINT TEMP 32
L10	NOOP
	// <-- End of if statement
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 33 LT TEMP 0 1
	CJUMP TEMP 33 L14
	ERROR
L14	// Load BS.Search()
	HLOAD TEMP 34 TEMP 0 0
	HLOAD TEMP 35 TEMP 34 4
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 36 21
	// Call BS.Search()
	MOVE TEMP 37 CALL TEMP 35 (TEMP 0 TEMP 36)
	CJUMP TEMP 37 L12
	MOVE TEMP 38 1
	PRINT TEMP 38
	JUMP L13
L12	MOVE TEMP 39 0
	PRINT TEMP 39
L13	NOOP
	// <-- End of if statement
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 40 LT TEMP 0 1
	CJUMP TEMP 40 L17
	ERROR
L17	// Load BS.Search()
	HLOAD TEMP 41 TEMP 0 0
	HLOAD TEMP 42 TEMP 41 4
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 43 37
	// Call BS.Search()
	MOVE TEMP 44 CALL TEMP 42 (TEMP 0 TEMP 43)
	CJUMP TEMP 44 L15
	MOVE TEMP 45 1
	PRINT TEMP 45
	JUMP L16
L15	MOVE TEMP 46 0
	PRINT TEMP 46
L16	NOOP
	// <-- End of if statement
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 47 LT TEMP 0 1
	CJUMP TEMP 47 L20
	ERROR
L20	// Load BS.Search()
	HLOAD TEMP 48 TEMP 0 0
	HLOAD TEMP 49 TEMP 48 4
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 50 38
	// Call BS.Search()
	MOVE TEMP 51 CALL TEMP 49 (TEMP 0 TEMP 50)
	CJUMP TEMP 51 L18
	MOVE TEMP 52 1
	PRINT TEMP 52
	JUMP L19
L18	MOVE TEMP 53 0
	PRINT TEMP 53
L19	NOOP
	// <-- End of if statement
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 54 LT TEMP 0 1
	CJUMP TEMP 54 L23
	ERROR
L23	// Load BS.Search()
	HLOAD TEMP 55 TEMP 0 0
	HLOAD TEMP 56 TEMP 55 4
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 57 39
	// Call BS.Search()
	MOVE TEMP 58 CALL TEMP 56 (TEMP 0 TEMP 57)
	CJUMP TEMP 58 L21
	MOVE TEMP 59 1
	PRINT TEMP 59
	JUMP L22
L21	MOVE TEMP 60 0
	PRINT TEMP 60
L22	NOOP
	// <-- End of if statement
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 61 LT TEMP 0 1
	CJUMP TEMP 61 L26
	ERROR
L26	// Load BS.Search()
	HLOAD TEMP 62 TEMP 0 0
	HLOAD TEMP 63 TEMP 62 4
	// Evaluate arguments
	// Argument 1
	MOVE TEMP 64 50
	// Call BS.Search()
	MOVE TEMP 65 CALL TEMP 63 (TEMP 0 TEMP 64)
	CJUMP TEMP 65 L24
	MOVE TEMP 66 1
	PRINT TEMP 66
	JUMP L25
L24	MOVE TEMP 67 0
	PRINT TEMP 67
L25	NOOP
	// <-- End of if statement
	MOVE TEMP 68 999
RETURN
	TEMP 68
END

BS_Search [2]
BEGIN
	MOVE TEMP 9 0
	MOVE TEMP 7 TEMP 9
	MOVE TEMP 10 0
	MOVE TEMP 2 TEMP 10
	HLOAD TEMP 11 TEMP 0 4
	HLOAD TEMP 12 TEMP 11 0
	MOVE TEMP 3 TEMP 12
	MOVE TEMP 13 1
	MOVE TEMP 14 MINUS TEMP 3 TEMP 13
	MOVE TEMP 3 TEMP 14
	MOVE TEMP 15 0
	MOVE TEMP 4 TEMP 15
	MOVE TEMP 16 1
	MOVE TEMP 5 TEMP 16
	// Start of while statement -->
L1	CJUMP TEMP 5 L2
	MOVE TEMP 17 PLUS TEMP 4 TEMP 3
	MOVE TEMP 6 TEMP 17
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 18 LT TEMP 0 1
	CJUMP TEMP 18 L3
	ERROR
L3	// Load BS.Div()
	HLOAD TEMP 19 TEMP 0 0
	HLOAD TEMP 20 TEMP 19 8
	// Evaluate arguments
	// Argument 1
	// Call BS.Div()
	MOVE TEMP 21 CALL TEMP 20 (TEMP 0 TEMP 6)
	MOVE TEMP 6 TEMP 21
	HLOAD TEMP 22 TEMP 0 4
	MOVE TEMP 24 LT TEMP 6 0
	CJUMP TEMP 24 L4
	ERROR
L4	HLOAD TEMP 23 TEMP 22 0
	MOVE TEMP 24 LT TEMP 23 TEMP 6
	CJUMP TEMP 24 L5
	ERROR
L5	MOVE TEMP 25 PLUS TEMP 6 1
	MOVE TEMP 25 TIMES TEMP 25 4
	MOVE TEMP 25 PLUS TEMP 25 TEMP 22
	HLOAD TEMP 26 TEMP 25 0
	MOVE TEMP 7 TEMP 26
	// Start of if statement -->
	MOVE TEMP 27 LT TEMP 1 TEMP 7
	CJUMP TEMP 27 L6
	MOVE TEMP 28 1
	MOVE TEMP 29 MINUS TEMP 6 TEMP 28
	MOVE TEMP 3 TEMP 29
	JUMP L7
L6	MOVE TEMP 30 1
	MOVE TEMP 31 PLUS TEMP 6 TEMP 30
	MOVE TEMP 4 TEMP 31
L7	NOOP
	// <-- End of if statement
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 32 LT TEMP 0 1
	CJUMP TEMP 32 L10
	ERROR
L10	// Load BS.Compare()
	HLOAD TEMP 33 TEMP 0 0
	HLOAD TEMP 34 TEMP 33 12
	// Evaluate arguments
	// Argument 1
	// Argument 2
	// Call BS.Compare()
	MOVE TEMP 35 CALL TEMP 34 (TEMP 0 TEMP 7 TEMP 1)
	CJUMP TEMP 35 L8
	MOVE TEMP 36 0
	MOVE TEMP 5 TEMP 36
	JUMP L9
L8	MOVE TEMP 37 1
	MOVE TEMP 5 TEMP 37
L9	NOOP
	// <-- End of if statement
	// Start of if statement -->
	MOVE TEMP 38 LT TEMP 3 TEMP 4
	CJUMP TEMP 38 L11
	MOVE TEMP 39 0
	MOVE TEMP 5 TEMP 39
	JUMP L12
L11	MOVE TEMP 40 0
	MOVE TEMP 8 TEMP 40
L12	NOOP
	// <-- End of if statement
	JUMP L1
L2	NOOP
	// <-- End of while statement
	// Start of if statement -->
	// Requested call on TEMP 0 of type BS
	MOVE TEMP 41 LT TEMP 0 1
	CJUMP TEMP 41 L15
	ERROR
L15	// Load BS.Compare()
	HLOAD TEMP 42 TEMP 0 0
	HLOAD TEMP 43 TEMP 42 12
	// Evaluate arguments
	// Argument 1
	// Argument 2
	// Call BS.Compare()
	MOVE TEMP 44 CALL TEMP 43 (TEMP 0 TEMP 7 TEMP 1)
	CJUMP TEMP 44 L13
	MOVE TEMP 45 1
	MOVE TEMP 2 TEMP 45
	JUMP L14
L13	MOVE TEMP 46 0
	MOVE TEMP 2 TEMP 46
L14	NOOP
	// <-- End of if statement
RETURN
	TEMP 2
END

BS_Div [2]
BEGIN
	MOVE TEMP 5 0
	MOVE TEMP 2 TEMP 5
	MOVE TEMP 6 0
	MOVE TEMP 3 TEMP 6
	MOVE TEMP 7 1
	MOVE TEMP 8 MINUS TEMP 1 TEMP 7
	MOVE TEMP 4 TEMP 8
	// Start of while statement -->
L1	MOVE TEMP 9 LT TEMP 3 TEMP 4
	CJUMP TEMP 9 L2
	MOVE TEMP 10 1
	MOVE TEMP 11 PLUS TEMP 2 TEMP 10
	MOVE TEMP 2 TEMP 11
	MOVE TEMP 12 2
	MOVE TEMP 13 PLUS TEMP 3 TEMP 12
	MOVE TEMP 3 TEMP 13
	JUMP L1
L2	NOOP
	// <-- End of while statement
RETURN
	TEMP 2
END

BS_Compare [3]
BEGIN
	MOVE TEMP 5 0
	MOVE TEMP 3 TEMP 5
	MOVE TEMP 6 1
	MOVE TEMP 7 PLUS TEMP 2 TEMP 6
	MOVE TEMP 4 TEMP 7
	// Start of if statement -->
	MOVE TEMP 8 LT TEMP 1 TEMP 2
	CJUMP TEMP 8 L1
	MOVE TEMP 9 0
	MOVE TEMP 3 TEMP 9
	JUMP L2
L1	// Start of if statement -->
	MOVE TEMP 11 LT TEMP 1 TEMP 4
	MOVE TEMP 10 LT TEMP 11 1
	CJUMP TEMP 10 L3
	MOVE TEMP 12 0
	MOVE TEMP 3 TEMP 12
	JUMP L4
L3	MOVE TEMP 13 1
	MOVE TEMP 3 TEMP 13
L4	NOOP
	// <-- End of if statement
L2	NOOP
	// <-- End of if statement
RETURN
	TEMP 3
END

BS_Print [1]
BEGIN
	MOVE TEMP 2 1
	MOVE TEMP 1 TEMP 2
	// Start of while statement -->
L1	HLOAD TEMP 3 TEMP 0 8
	MOVE TEMP 4 LT TEMP 1 TEMP 3
	CJUMP TEMP 4 L2
	HLOAD TEMP 5 TEMP 0 4
	MOVE TEMP 7 LT TEMP 1 0
	CJUMP TEMP 7 L3
	ERROR
L3	HLOAD TEMP 6 TEMP 5 0
	MOVE TEMP 7 LT TEMP 6 TEMP 1
	CJUMP TEMP 7 L4
	ERROR
L4	MOVE TEMP 8 PLUS TEMP 1 1
	MOVE TEMP 8 TIMES TEMP 8 4
	MOVE TEMP 8 PLUS TEMP 8 TEMP 5
	HLOAD TEMP 9 TEMP 8 0
	PRINT TEMP 9
	MOVE TEMP 10 1
	MOVE TEMP 11 PLUS TEMP 1 TEMP 10
	MOVE TEMP 1 TEMP 11
	JUMP L1
L2	NOOP
	// <-- End of while statement
	MOVE TEMP 12 99999
	PRINT TEMP 12
	MOVE TEMP 13 0
RETURN
	TEMP 13
END

BS_Init [2]
BEGIN
	HSTORE TEMP 0 8 TEMP 1
	// Check whether array allocation size is positive
	MOVE TEMP 6 LT TEMP 1 1
	CJUMP TEMP 6 L1
	ERROR
L1	// Start of array allocation -->
	MOVE TEMP 8 PLUS TEMP 1 1
	MOVE TEMP 9 TIMES TEMP 8 4
	MOVE TEMP 10 HALLOCATE TEMP 9
	MOVE TEMP 7 TIMES TEMP 1 4
	// Initialize allocated array
	MOVE TEMP 11 0  // Zero value register
	MOVE TEMP 12 4  // Offset register
L2	MOVE TEMP 13 LT TEMP 12 TEMP 9
	CJUMP TEMP 13 L3
	MOVE TEMP 14 PLUS TEMP 10 TEMP 12
	HSTORE TEMP 14 0 TEMP 11
	MOVE TEMP 12 PLUS TEMP 12 4
	JUMP L2
L3	HSTORE TEMP 10 0 TEMP 1  // Store array length
	// <-- End of array allocation
	HSTORE TEMP 0 4 TEMP 10
	MOVE TEMP 15 1
	MOVE TEMP 2 TEMP 15
	HLOAD TEMP 16 TEMP 0 8
	MOVE TEMP 17 1
	MOVE TEMP 18 PLUS TEMP 16 TEMP 17
	MOVE TEMP 3 TEMP 18
	// Start of while statement -->
L4	HLOAD TEMP 19 TEMP 0 8
	MOVE TEMP 20 LT TEMP 2 TEMP 19
	CJUMP TEMP 20 L5
	MOVE TEMP 21 2
	MOVE TEMP 22 TIMES TEMP 21 TEMP 2
	MOVE TEMP 5 TEMP 22
	MOVE TEMP 23 3
	MOVE TEMP 24 MINUS TEMP 3 TEMP 23
	MOVE TEMP 4 TEMP 24
	// Start of array assignment -->
	HLOAD TEMP 25 TEMP 0 4
	MOVE TEMP 26 PLUS TEMP 5 TEMP 4
	MOVE TEMP 28 LT TEMP 2 0
	CJUMP TEMP 28 L6
	ERROR
L6	HLOAD TEMP 27 TEMP 25 0
	MOVE TEMP 28 LT TEMP 27 TEMP 2
	CJUMP TEMP 28 L7
	ERROR
L7	MOVE TEMP 29 PLUS TEMP 2 1
	MOVE TEMP 29 TIMES TEMP 29 4
	MOVE TEMP 29 PLUS TEMP 29 TEMP 25
	HSTORE TEMP 29 0 TEMP 26
	// <-- End of array assignment
	MOVE TEMP 30 1
	MOVE TEMP 31 PLUS TEMP 2 TEMP 30
	MOVE TEMP 2 TEMP 31
	MOVE TEMP 32 1
	MOVE TEMP 33 MINUS TEMP 3 TEMP 32
	MOVE TEMP 3 TEMP 33
	JUMP L4
L5	NOOP
	// <-- End of while statement
	MOVE TEMP 34 0
RETURN
	TEMP 34
END
